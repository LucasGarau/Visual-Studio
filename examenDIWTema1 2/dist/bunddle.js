/*! For license information please see bunddle.js.LICENSE.txt */
(()=>{"use strict";var t={379:(t,e,i)=>{var n,o=function(){var t={};return function(e){if(void 0===t[e]){var i=document.querySelector(e);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(t){i=null}t[e]=i}return t[e]}}(),s=[];function r(t){for(var e=-1,i=0;i<s.length;i++)if(s[i].identifier===t){e=i;break}return e}function a(t,e){for(var i={},n=[],o=0;o<t.length;o++){var a=t[o],l=e.base?a[0]+e.base:a[0],c=i[l]||0,h="".concat(l," ").concat(c);i[l]=c+1;var d=r(h),u={css:a[1],media:a[2],sourceMap:a[3]};-1!==d?(s[d].references++,s[d].updater(u)):s.push({identifier:h,updater:m(u,e),references:1}),n.push(h)}return n}function l(t){var e=document.createElement("style"),n=t.attributes||{};if(void 0===n.nonce){var s=i.nc;s&&(n.nonce=s)}if(Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])})),"function"==typeof t.insert)t.insert(e);else{var r=o(t.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}return e}var c,h=(c=[],function(t,e){return c[t]=e,c.filter(Boolean).join("\n")});function d(t,e,i,n){var o=i?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(t.styleSheet)t.styleSheet.cssText=h(e,o);else{var s=document.createTextNode(o),r=t.childNodes;r[e]&&t.removeChild(r[e]),r.length?t.insertBefore(s,r[e]):t.appendChild(s)}}function u(t,e,i){var n=i.css,o=i.media,s=i.sourceMap;if(o?t.setAttribute("media",o):t.removeAttribute("media"),s&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}var f=null,p=0;function m(t,e){var i,n,o;if(e.singleton){var s=p++;i=f||(f=l(e)),n=d.bind(null,i,s,!1),o=d.bind(null,i,s,!0)}else i=l(e),n=u.bind(null,i,e),o=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(i)};return n(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n(t=e)}else o()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n));var i=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var n=0;n<i.length;n++){var o=r(i[n]);s[o].references--}for(var l=a(t,e),c=0;c<i.length;c++){var h=r(i[c]);0===s[h].references&&(s[h].updater(),s.splice(h,1))}i=l}}}}},e={};function i(n){if(e[n])return e[n].exports;var o=e[n]={exports:{}};return t[n](o,o.exports,i),o.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t={};i.r(t);var e={};i.r(e);var n={};i.r(n);var o=i(379),s=i.n(o);s()(t.default,{insert:"head",singleton:!1}),t.default.locals;s()(e.default,{insert:"head",singleton:!1}),e.default.locals;s()(n.default,{insert:"head",singleton:!1}),n.default.locals;const r=jQuery;var a=i.n(r);const l="transitionend";const c={TRANSITION_END:"bsTransitionEnd",getUID(t){do{t+=~~(1e6*Math.random())}while(document.getElementById(t));return t},getSelectorFromElement(t){let e=t.getAttribute("data-target");if(!e||"#"===e){const i=t.getAttribute("href");e=i&&"#"!==i?i.trim():""}try{return document.querySelector(e)?e:null}catch(t){return null}},getTransitionDurationFromElement(t){if(!t)return 0;let e=a()(t).css("transition-duration"),i=a()(t).css("transition-delay");const n=parseFloat(e),o=parseFloat(i);return n||o?(e=e.split(",")[0],i=i.split(",")[0],1e3*(parseFloat(e)+parseFloat(i))):0},reflow:t=>t.offsetHeight,triggerTransitionEnd(t){a()(t).trigger(l)},supportsTransitionEnd:()=>Boolean(l),isElement:t=>(t[0]||t).nodeType,typeCheckConfig(t,e,i){for(const o in i)if(Object.prototype.hasOwnProperty.call(i,o)){const s=i[o],r=e[o],a=r&&c.isElement(r)?"element":null==(n=r)?`${n}`:{}.toString.call(n).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(s).test(a))throw new Error(`${t.toUpperCase()}: Option "${o}" provided type "${a}" but expected type "${s}".`)}var n},findShadowRoot(t){if(!document.documentElement.attachShadow)return null;if("function"==typeof t.getRootNode){const e=t.getRootNode();return e instanceof ShadowRoot?e:null}return t instanceof ShadowRoot?t:t.parentNode?c.findShadowRoot(t.parentNode):null},jQueryDetection(){if(void 0===a())throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");const t=a().fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||1===t[0]&&9===t[1]&&t[2]<1||t[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}};c.jQueryDetection(),a().fn.emulateTransitionEnd=function(t){let e=!1;return a()(this).one(c.TRANSITION_END,(()=>{e=!0})),setTimeout((()=>{e||c.triggerTransitionEnd(this)}),t),this},a().event.special[c.TRANSITION_END]={bindType:l,delegateType:l,handle(t){if(a()(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}};const h=c,d="bs.alert",u=a().fn.alert;class f{constructor(t){this._element=t}static get VERSION(){return"4.5.3"}close(t){let e=this._element;t&&(e=this._getRootElement(t)),this._triggerCloseEvent(e).isDefaultPrevented()||this._removeElement(e)}dispose(){a().removeData(this._element,d),this._element=null}_getRootElement(t){const e=h.getSelectorFromElement(t);let i=!1;return e&&(i=document.querySelector(e)),i||(i=a()(t).closest(".alert")[0]),i}_triggerCloseEvent(t){const e=a().Event("close.bs.alert");return a()(t).trigger(e),e}_removeElement(t){if(a()(t).removeClass("show"),!a()(t).hasClass("fade"))return void this._destroyElement(t);const e=h.getTransitionDurationFromElement(t);a()(t).one(h.TRANSITION_END,(e=>this._destroyElement(t,e))).emulateTransitionEnd(e)}_destroyElement(t){a()(t).detach().trigger("closed.bs.alert").remove()}static _jQueryInterface(t){return this.each((function(){const e=a()(this);let i=e.data(d);i||(i=new f(this),e.data(d,i)),"close"===t&&i[t](this)}))}static _handleDismiss(t){return function(e){e&&e.preventDefault(),t.close(this)}}}a()(document).on("click.bs.alert.data-api",'[data-dismiss="alert"]',f._handleDismiss(new f)),a().fn.alert=f._jQueryInterface,a().fn.alert.Constructor=f,a().fn.alert.noConflict=()=>(a().fn.alert=u,f._jQueryInterface);const p="bs.button",m=a().fn.button,g="active",_='[data-toggle^="button"]',v='input:not([type="hidden"])',b=".btn";class y{constructor(t){this._element=t,this.shouldAvoidTriggerChange=!1}static get VERSION(){return"4.5.3"}toggle(){let t=!0,e=!0;const i=a()(this._element).closest('[data-toggle="buttons"]')[0];if(i){const n=this._element.querySelector(v);if(n){if("radio"===n.type)if(n.checked&&this._element.classList.contains(g))t=!1;else{const t=i.querySelector(".active");t&&a()(t).removeClass(g)}t&&("checkbox"!==n.type&&"radio"!==n.type||(n.checked=!this._element.classList.contains(g)),this.shouldAvoidTriggerChange||a()(n).trigger("change")),n.focus(),e=!1}}this._element.hasAttribute("disabled")||this._element.classList.contains("disabled")||(e&&this._element.setAttribute("aria-pressed",!this._element.classList.contains(g)),t&&a()(this._element).toggleClass(g))}dispose(){a().removeData(this._element,p),this._element=null}static _jQueryInterface(t,e){return this.each((function(){const i=a()(this);let n=i.data(p);n||(n=new y(this),i.data(p,n)),n.shouldAvoidTriggerChange=e,"toggle"===t&&n[t]()}))}}a()(document).on("click.bs.button.data-api",_,(t=>{let e=t.target;const i=e;if(a()(e).hasClass("btn")||(e=a()(e).closest(b)[0]),!e||e.hasAttribute("disabled")||e.classList.contains("disabled"))t.preventDefault();else{const n=e.querySelector(v);if(n&&(n.hasAttribute("disabled")||n.classList.contains("disabled")))return void t.preventDefault();"INPUT"!==i.tagName&&"LABEL"===e.tagName||y._jQueryInterface.call(a()(e),"toggle","INPUT"===i.tagName)}})).on("focus.bs.button.data-api blur.bs.button.data-api",_,(t=>{const e=a()(t.target).closest(b)[0];a()(e).toggleClass("focus",/^focus(in)?$/.test(t.type))})),a()(window).on("load.bs.button.data-api",(()=>{let t=[].slice.call(document.querySelectorAll('[data-toggle="buttons"] .btn'));for(let e=0,i=t.length;e<i;e++){const i=t[e],n=i.querySelector(v);n.checked||n.hasAttribute("checked")?i.classList.add(g):i.classList.remove(g)}t=[].slice.call(document.querySelectorAll('[data-toggle="button"]'));for(let e=0,i=t.length;e<i;e++){const i=t[e];"true"===i.getAttribute("aria-pressed")?i.classList.add(g):i.classList.remove(g)}})),a().fn.button=y._jQueryInterface,a().fn.button.Constructor=y,a().fn.button.noConflict=()=>(a().fn.button=m,y._jQueryInterface);const w="bs.carousel",E=a().fn.carousel,T={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},C={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},S="next",N="prev",D="slid.bs.carousel",A="active",I=".active.carousel-item",O={TOUCH:"touch",PEN:"pen"};class k{constructor(t,e){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(e),this._element=t,this._indicatorsElement=this._element.querySelector(".carousel-indicators"),this._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,this._pointerEvent=Boolean(window.PointerEvent||window.MSPointerEvent),this._addEventListeners()}static get VERSION(){return"4.5.3"}static get Default(){return T}next(){this._isSliding||this._slide(S)}nextWhenVisible(){const t=a()(this._element);!document.hidden&&t.is(":visible")&&"hidden"!==t.css("visibility")&&this.next()}prev(){this._isSliding||this._slide(N)}pause(t){t||(this._isPaused=!0),this._element.querySelector(".carousel-item-next, .carousel-item-prev")&&(h.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null}cycle(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))}to(t){this._activeElement=this._element.querySelector(I);const e=this._getItemIndex(this._activeElement);if(t>this._items.length-1||t<0)return;if(this._isSliding)return void a()(this._element).one(D,(()=>this.to(t)));if(e===t)return this.pause(),void this.cycle();const i=t>e?S:N;this._slide(i,this._items[t])}dispose(){a()(this._element).off(".bs.carousel"),a().removeData(this._element,w),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null}_getConfig(t){return t={...T,...t},h.typeCheckConfig("carousel",t,C),t}_handleSwipe(){const t=Math.abs(this.touchDeltaX);if(t<=40)return;const e=t/this.touchDeltaX;this.touchDeltaX=0,e>0&&this.prev(),e<0&&this.next()}_addEventListeners(){this._config.keyboard&&a()(this._element).on("keydown.bs.carousel",(t=>this._keydown(t))),"hover"===this._config.pause&&a()(this._element).on("mouseenter.bs.carousel",(t=>this.pause(t))).on("mouseleave.bs.carousel",(t=>this.cycle(t))),this._config.touch&&this._addTouchEventListeners()}_addTouchEventListeners(){if(!this._touchSupported)return;const t=t=>{this._pointerEvent&&O[t.originalEvent.pointerType.toUpperCase()]?this.touchStartX=t.originalEvent.clientX:this._pointerEvent||(this.touchStartX=t.originalEvent.touches[0].clientX)},e=t=>{t.originalEvent.touches&&t.originalEvent.touches.length>1?this.touchDeltaX=0:this.touchDeltaX=t.originalEvent.touches[0].clientX-this.touchStartX},i=t=>{this._pointerEvent&&O[t.originalEvent.pointerType.toUpperCase()]&&(this.touchDeltaX=t.originalEvent.clientX-this.touchStartX),this._handleSwipe(),"hover"===this._config.pause&&(this.pause(),this.touchTimeout&&clearTimeout(this.touchTimeout),this.touchTimeout=setTimeout((t=>this.cycle(t)),500+this._config.interval))};a()(this._element.querySelectorAll(".carousel-item img")).on("dragstart.bs.carousel",(t=>t.preventDefault())),this._pointerEvent?(a()(this._element).on("pointerdown.bs.carousel",(e=>t(e))),a()(this._element).on("pointerup.bs.carousel",(t=>i(t))),this._element.classList.add("pointer-event")):(a()(this._element).on("touchstart.bs.carousel",(e=>t(e))),a()(this._element).on("touchmove.bs.carousel",(t=>e(t))),a()(this._element).on("touchend.bs.carousel",(t=>i(t))))}_keydown(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case 37:t.preventDefault(),this.prev();break;case 39:t.preventDefault(),this.next()}}_getItemIndex(t){return this._items=t&&t.parentNode?[].slice.call(t.parentNode.querySelectorAll(".carousel-item")):[],this._items.indexOf(t)}_getItemByDirection(t,e){const i=t===S,n=t===N,o=this._getItemIndex(e),s=this._items.length-1;if((n&&0===o||i&&o===s)&&!this._config.wrap)return e;const r=(o+(t===N?-1:1))%this._items.length;return-1===r?this._items[this._items.length-1]:this._items[r]}_triggerSlideEvent(t,e){const i=this._getItemIndex(t),n=this._getItemIndex(this._element.querySelector(I)),o=a().Event("slide.bs.carousel",{relatedTarget:t,direction:e,from:n,to:i});return a()(this._element).trigger(o),o}_setActiveIndicatorElement(t){if(this._indicatorsElement){const e=[].slice.call(this._indicatorsElement.querySelectorAll(".active"));a()(e).removeClass(A);const i=this._indicatorsElement.children[this._getItemIndex(t)];i&&a()(i).addClass(A)}}_slide(t,e){const i=this._element.querySelector(I),n=this._getItemIndex(i),o=e||i&&this._getItemByDirection(t,i),s=this._getItemIndex(o),r=Boolean(this._interval);let l,c,d;if(t===S?(l="carousel-item-left",c="carousel-item-next",d="left"):(l="carousel-item-right",c="carousel-item-prev",d="right"),o&&a()(o).hasClass(A))return void(this._isSliding=!1);if(this._triggerSlideEvent(o,d).isDefaultPrevented())return;if(!i||!o)return;this._isSliding=!0,r&&this.pause(),this._setActiveIndicatorElement(o);const u=a().Event(D,{relatedTarget:o,direction:d,from:n,to:s});if(a()(this._element).hasClass("slide")){a()(o).addClass(c),h.reflow(o),a()(i).addClass(l),a()(o).addClass(l);const t=parseInt(o.getAttribute("data-interval"),10);t?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=t):this._config.interval=this._config.defaultInterval||this._config.interval;const e=h.getTransitionDurationFromElement(i);a()(i).one(h.TRANSITION_END,(()=>{a()(o).removeClass(`${l} ${c}`).addClass(A),a()(i).removeClass(`active ${c} ${l}`),this._isSliding=!1,setTimeout((()=>a()(this._element).trigger(u)),0)})).emulateTransitionEnd(e)}else a()(i).removeClass(A),a()(o).addClass(A),this._isSliding=!1,a()(this._element).trigger(u);r&&this.cycle()}static _jQueryInterface(t){return this.each((function(){let e=a()(this).data(w),i={...T,...a()(this).data()};"object"==typeof t&&(i={...i,...t});const n="string"==typeof t?t:i.slide;if(e||(e=new k(this,i),a()(this).data(w,e)),"number"==typeof t)e.to(t);else if("string"==typeof n){if(void 0===e[n])throw new TypeError(`No method named "${n}"`);e[n]()}else i.interval&&i.ride&&(e.pause(),e.cycle())}))}static _dataApiClickHandler(t){const e=h.getSelectorFromElement(this);if(!e)return;const i=a()(e)[0];if(!i||!a()(i).hasClass("carousel"))return;const n={...a()(i).data(),...a()(this).data()},o=this.getAttribute("data-slide-to");o&&(n.interval=!1),k._jQueryInterface.call(a()(i),n),o&&a()(i).data(w).to(o),t.preventDefault()}}a()(document).on("click.bs.carousel.data-api","[data-slide], [data-slide-to]",k._dataApiClickHandler),a()(window).on("load.bs.carousel.data-api",(()=>{const t=[].slice.call(document.querySelectorAll('[data-ride="carousel"]'));for(let e=0,i=t.length;e<i;e++){const i=a()(t[e]);k._jQueryInterface.call(i,i.data())}})),a().fn.carousel=k._jQueryInterface,a().fn.carousel.Constructor=k,a().fn.carousel.noConflict=()=>(a().fn.carousel=E,k._jQueryInterface);const x="bs.collapse",j=a().fn.collapse,L={toggle:!0,parent:""},P={toggle:"boolean",parent:"(string|element)"},F="show",R="collapse",M="collapsing",H="collapsed",B="width",q='[data-toggle="collapse"]';class Q{constructor(t,e){this._isTransitioning=!1,this._element=t,this._config=this._getConfig(e),this._triggerArray=[].slice.call(document.querySelectorAll(`[data-toggle="collapse"][href="#${t.id}"],[data-toggle="collapse"][data-target="#${t.id}"]`));const i=[].slice.call(document.querySelectorAll(q));for(let e=0,n=i.length;e<n;e++){const n=i[e],o=h.getSelectorFromElement(n),s=[].slice.call(document.querySelectorAll(o)).filter((e=>e===t));null!==o&&s.length>0&&(this._selector=o,this._triggerArray.push(n))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}static get VERSION(){return"4.5.3"}static get Default(){return L}toggle(){a()(this._element).hasClass(F)?this.hide():this.show()}show(){if(this._isTransitioning||a()(this._element).hasClass(F))return;let t,e;if(this._parent&&(t=[].slice.call(this._parent.querySelectorAll(".show, .collapsing")).filter((t=>"string"==typeof this._config.parent?t.getAttribute("data-parent")===this._config.parent:t.classList.contains(R))),0===t.length&&(t=null)),t&&(e=a()(t).not(this._selector).data(x),e&&e._isTransitioning))return;const i=a().Event("show.bs.collapse");if(a()(this._element).trigger(i),i.isDefaultPrevented())return;t&&(Q._jQueryInterface.call(a()(t).not(this._selector),"hide"),e||a()(t).data(x,null));const n=this._getDimension();a()(this._element).removeClass(R).addClass(M),this._element.style[n]=0,this._triggerArray.length&&a()(this._triggerArray).removeClass(H).attr("aria-expanded",!0),this.setTransitioning(!0);const o=`scroll${n[0].toUpperCase()+n.slice(1)}`,s=h.getTransitionDurationFromElement(this._element);a()(this._element).one(h.TRANSITION_END,(()=>{a()(this._element).removeClass(M).addClass("collapse show"),this._element.style[n]="",this.setTransitioning(!1),a()(this._element).trigger("shown.bs.collapse")})).emulateTransitionEnd(s),this._element.style[n]=`${this._element[o]}px`}hide(){if(this._isTransitioning||!a()(this._element).hasClass(F))return;const t=a().Event("hide.bs.collapse");if(a()(this._element).trigger(t),t.isDefaultPrevented())return;const e=this._getDimension();this._element.style[e]=`${this._element.getBoundingClientRect()[e]}px`,h.reflow(this._element),a()(this._element).addClass(M).removeClass("collapse show");const i=this._triggerArray.length;if(i>0)for(let t=0;t<i;t++){const e=this._triggerArray[t],i=h.getSelectorFromElement(e);null!==i&&(a()([].slice.call(document.querySelectorAll(i))).hasClass(F)||a()(e).addClass(H).attr("aria-expanded",!1))}this.setTransitioning(!0),this._element.style[e]="";const n=h.getTransitionDurationFromElement(this._element);a()(this._element).one(h.TRANSITION_END,(()=>{this.setTransitioning(!1),a()(this._element).removeClass(M).addClass(R).trigger("hidden.bs.collapse")})).emulateTransitionEnd(n)}setTransitioning(t){this._isTransitioning=t}dispose(){a().removeData(this._element,x),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null}_getConfig(t){return(t={...L,...t}).toggle=Boolean(t.toggle),h.typeCheckConfig("collapse",t,P),t}_getDimension(){return a()(this._element).hasClass(B)?B:"height"}_getParent(){let t;h.isElement(this._config.parent)?(t=this._config.parent,void 0!==this._config.parent.jquery&&(t=this._config.parent[0])):t=document.querySelector(this._config.parent);const e=`[data-toggle="collapse"][data-parent="${this._config.parent}"]`,i=[].slice.call(t.querySelectorAll(e));return a()(i).each(((t,e)=>{this._addAriaAndCollapsedClass(Q._getTargetFromElement(e),[e])})),t}_addAriaAndCollapsedClass(t,e){const i=a()(t).hasClass(F);e.length&&a()(e).toggleClass(H,!i).attr("aria-expanded",i)}static _getTargetFromElement(t){const e=h.getSelectorFromElement(t);return e?document.querySelector(e):null}static _jQueryInterface(t){return this.each((function(){const e=a()(this);let i=e.data(x);const n={...L,...e.data(),..."object"==typeof t&&t?t:{}};if(!i&&n.toggle&&"string"==typeof t&&/show|hide/.test(t)&&(n.toggle=!1),i||(i=new Q(this,n),e.data(x,i)),"string"==typeof t){if(void 0===i[t])throw new TypeError(`No method named "${t}"`);i[t]()}}))}}a()(document).on("click.bs.collapse.data-api",q,(function(t){"A"===t.currentTarget.tagName&&t.preventDefault();const e=a()(this),i=h.getSelectorFromElement(this),n=[].slice.call(document.querySelectorAll(i));a()(n).each((function(){const t=a()(this),i=t.data(x)?"toggle":e.data();Q._jQueryInterface.call(t,i)}))})),a().fn.collapse=Q._jQueryInterface,a().fn.collapse.Constructor=Q,a().fn.collapse.noConflict=()=>(a().fn.collapse=j,Q._jQueryInterface);var W="undefined"!=typeof window&&"undefined"!=typeof document&&"undefined"!=typeof navigator,U=function(){for(var t=["Edge","Trident","Firefox"],e=0;e<t.length;e+=1)if(W&&navigator.userAgent.indexOf(t[e])>=0)return 1;return 0}(),$=W&&window.Promise?function(t){var e=!1;return function(){e||(e=!0,window.Promise.resolve().then((function(){e=!1,t()})))}}:function(t){var e=!1;return function(){e||(e=!0,setTimeout((function(){e=!1,t()}),U))}};function V(t){return t&&"[object Function]"==={}.toString.call(t)}function Y(t,e){if(1!==t.nodeType)return[];var i=t.ownerDocument.defaultView.getComputedStyle(t,null);return e?i[e]:i}function z(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function X(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var e=Y(t),i=e.overflow,n=e.overflowX,o=e.overflowY;return/(auto|scroll|overlay)/.test(i+o+n)?t:X(z(t))}function K(t){return t&&t.referenceNode?t.referenceNode:t}var G=W&&!(!window.MSInputMethodContext||!document.documentMode),J=W&&/MSIE 10/.test(navigator.userAgent);function Z(t){return 11===t?G:10===t?J:G||J}function tt(t){if(!t)return document.documentElement;for(var e=Z(10)?document.body:null,i=t.offsetParent||null;i===e&&t.nextElementSibling;)i=(t=t.nextElementSibling).offsetParent;var n=i&&i.nodeName;return n&&"BODY"!==n&&"HTML"!==n?-1!==["TH","TD","TABLE"].indexOf(i.nodeName)&&"static"===Y(i,"position")?tt(i):i:t?t.ownerDocument.documentElement:document.documentElement}function et(t){return null!==t.parentNode?et(t.parentNode):t}function it(t,e){if(!(t&&t.nodeType&&e&&e.nodeType))return document.documentElement;var i=t.compareDocumentPosition(e)&Node.DOCUMENT_POSITION_FOLLOWING,n=i?t:e,o=i?e:t,s=document.createRange();s.setStart(n,0),s.setEnd(o,0);var r,a,l=s.commonAncestorContainer;if(t!==l&&e!==l||n.contains(o))return"BODY"===(a=(r=l).nodeName)||"HTML"!==a&&tt(r.firstElementChild)!==r?tt(l):l;var c=et(t);return c.host?it(c.host,e):it(t,et(e).host)}function nt(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top",i="top"===e?"scrollTop":"scrollLeft",n=t.nodeName;if("BODY"===n||"HTML"===n){var o=t.ownerDocument.documentElement,s=t.ownerDocument.scrollingElement||o;return s[i]}return t[i]}function ot(t,e){var i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=nt(e,"top"),o=nt(e,"left"),s=i?-1:1;return t.top+=n*s,t.bottom+=n*s,t.left+=o*s,t.right+=o*s,t}function st(t,e){var i="x"===e?"Left":"Top",n="Left"===i?"Right":"Bottom";return parseFloat(t["border"+i+"Width"])+parseFloat(t["border"+n+"Width"])}function rt(t,e,i,n){return Math.max(e["offset"+t],e["scroll"+t],i["client"+t],i["offset"+t],i["scroll"+t],Z(10)?parseInt(i["offset"+t])+parseInt(n["margin"+("Height"===t?"Top":"Left")])+parseInt(n["margin"+("Height"===t?"Bottom":"Right")]):0)}function at(t){var e=t.body,i=t.documentElement,n=Z(10)&&getComputedStyle(i);return{height:rt("Height",e,i,n),width:rt("Width",e,i,n)}}var lt=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},ct=function(){function t(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,i,n){return i&&t(e.prototype,i),n&&t(e,n),e}}(),ht=function(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t},dt=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])}return t};function ut(t){return dt({},t,{right:t.left+t.width,bottom:t.top+t.height})}function ft(t){var e={};try{if(Z(10)){e=t.getBoundingClientRect();var i=nt(t,"top"),n=nt(t,"left");e.top+=i,e.left+=n,e.bottom+=i,e.right+=n}else e=t.getBoundingClientRect()}catch(t){}var o={left:e.left,top:e.top,width:e.right-e.left,height:e.bottom-e.top},s="HTML"===t.nodeName?at(t.ownerDocument):{},r=s.width||t.clientWidth||o.width,a=s.height||t.clientHeight||o.height,l=t.offsetWidth-r,c=t.offsetHeight-a;if(l||c){var h=Y(t);l-=st(h,"x"),c-=st(h,"y"),o.width-=l,o.height-=c}return ut(o)}function pt(t,e){var i=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=Z(10),o="HTML"===e.nodeName,s=ft(t),r=ft(e),a=X(t),l=Y(e),c=parseFloat(l.borderTopWidth),h=parseFloat(l.borderLeftWidth);i&&o&&(r.top=Math.max(r.top,0),r.left=Math.max(r.left,0));var d=ut({top:s.top-r.top-c,left:s.left-r.left-h,width:s.width,height:s.height});if(d.marginTop=0,d.marginLeft=0,!n&&o){var u=parseFloat(l.marginTop),f=parseFloat(l.marginLeft);d.top-=c-u,d.bottom-=c-u,d.left-=h-f,d.right-=h-f,d.marginTop=u,d.marginLeft=f}return(n&&!i?e.contains(a):e===a&&"BODY"!==a.nodeName)&&(d=ot(d,e)),d}function mt(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=t.ownerDocument.documentElement,n=pt(t,i),o=Math.max(i.clientWidth,window.innerWidth||0),s=Math.max(i.clientHeight,window.innerHeight||0),r=e?0:nt(i),a=e?0:nt(i,"left"),l={top:r-n.top+n.marginTop,left:a-n.left+n.marginLeft,width:o,height:s};return ut(l)}function gt(t){var e=t.nodeName;if("BODY"===e||"HTML"===e)return!1;if("fixed"===Y(t,"position"))return!0;var i=z(t);return!!i&&gt(i)}function _t(t){if(!t||!t.parentElement||Z())return document.documentElement;for(var e=t.parentElement;e&&"none"===Y(e,"transform");)e=e.parentElement;return e||document.documentElement}function vt(t,e,i,n){var o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],s={top:0,left:0},r=o?_t(t):it(t,K(e));if("viewport"===n)s=mt(r,o);else{var a=void 0;"scrollParent"===n?"BODY"===(a=X(z(e))).nodeName&&(a=t.ownerDocument.documentElement):a="window"===n?t.ownerDocument.documentElement:n;var l=pt(a,r,o);if("HTML"!==a.nodeName||gt(r))s=l;else{var c=at(t.ownerDocument),h=c.height,d=c.width;s.top+=l.top-l.marginTop,s.bottom=h+l.top,s.left+=l.left-l.marginLeft,s.right=d+l.left}}var u="number"==typeof(i=i||0);return s.left+=u?i:i.left||0,s.top+=u?i:i.top||0,s.right-=u?i:i.right||0,s.bottom-=u?i:i.bottom||0,s}function bt(t){return t.width*t.height}function yt(t,e,i,n,o){var s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var r=vt(i,n,s,o),a={top:{width:r.width,height:e.top-r.top},right:{width:r.right-e.right,height:r.height},bottom:{width:r.width,height:r.bottom-e.bottom},left:{width:e.left-r.left,height:r.height}},l=Object.keys(a).map((function(t){return dt({key:t},a[t],{area:bt(a[t])})})).sort((function(t,e){return e.area-t.area})),c=l.filter((function(t){var e=t.width,n=t.height;return e>=i.clientWidth&&n>=i.clientHeight})),h=c.length>0?c[0].key:l[0].key,d=t.split("-")[1];return h+(d?"-"+d:"")}function wt(t,e,i){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,o=n?_t(e):it(e,K(i));return pt(i,o,n)}function Et(t){var e=t.ownerDocument.defaultView.getComputedStyle(t),i=parseFloat(e.marginTop||0)+parseFloat(e.marginBottom||0),n=parseFloat(e.marginLeft||0)+parseFloat(e.marginRight||0);return{width:t.offsetWidth+n,height:t.offsetHeight+i}}function Tt(t){var e={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,(function(t){return e[t]}))}function Ct(t,e,i){i=i.split("-")[0];var n=Et(t),o={width:n.width,height:n.height},s=-1!==["right","left"].indexOf(i),r=s?"top":"left",a=s?"left":"top",l=s?"height":"width",c=s?"width":"height";return o[r]=e[r]+e[l]/2-n[l]/2,o[a]=i===a?e[a]-n[c]:e[Tt(a)],o}function St(t,e){return Array.prototype.find?t.find(e):t.filter(e)[0]}function Nt(t,e,i){return(void 0===i?t:t.slice(0,function(t,e,i){if(Array.prototype.findIndex)return t.findIndex((function(t){return t.name===i}));var n=St(t,(function(t){return t.name===i}));return t.indexOf(n)}(t,0,i))).forEach((function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var i=t.function||t.fn;t.enabled&&V(i)&&(e.offsets.popper=ut(e.offsets.popper),e.offsets.reference=ut(e.offsets.reference),e=i(e,t))})),e}function Dt(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=wt(this.state,this.popper,this.reference,this.options.positionFixed),t.placement=yt(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.positionFixed=this.options.positionFixed,t.offsets.popper=Ct(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",t=Nt(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}function At(t,e){return t.some((function(t){var i=t.name;return t.enabled&&i===e}))}function It(t){for(var e=[!1,"ms","Webkit","Moz","O"],i=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<e.length;n++){var o=e[n],s=o?""+o+i:t;if(void 0!==document.body.style[s])return s}return null}function Ot(){return this.state.isDestroyed=!0,At(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[It("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function kt(t){var e=t.ownerDocument;return e?e.defaultView:window}function xt(t,e,i,n){var o="BODY"===t.nodeName,s=o?t.ownerDocument.defaultView:t;s.addEventListener(e,i,{passive:!0}),o||xt(X(s.parentNode),e,i,n),n.push(s)}function jt(t,e,i,n){i.updateBound=n,kt(t).addEventListener("resize",i.updateBound,{passive:!0});var o=X(t);return xt(o,"scroll",i.updateBound,i.scrollParents),i.scrollElement=o,i.eventsEnabled=!0,i}function Lt(){this.state.eventsEnabled||(this.state=jt(this.reference,this.options,this.state,this.scheduleUpdate))}function Pt(){var t,e;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(t=this.reference,e=this.state,kt(t).removeEventListener("resize",e.updateBound),e.scrollParents.forEach((function(t){t.removeEventListener("scroll",e.updateBound)})),e.updateBound=null,e.scrollParents=[],e.scrollElement=null,e.eventsEnabled=!1,e))}function Ft(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function Rt(t,e){Object.keys(e).forEach((function(i){var n="";-1!==["width","height","top","right","bottom","left"].indexOf(i)&&Ft(e[i])&&(n="px"),t.style[i]=e[i]+n}))}var Mt=W&&/Firefox/i.test(navigator.userAgent);function Ht(t,e,i){var n=St(t,(function(t){return t.name===e})),o=!!n&&t.some((function(t){return t.name===i&&t.enabled&&t.order<n.order}));if(!o){var s="`"+e+"`",r="`"+i+"`";console.warn(r+" modifier is required by "+s+" modifier in order to work, be sure to include it before "+s+"!")}return o}var Bt=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],qt=Bt.slice(3);function Qt(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=qt.indexOf(t),n=qt.slice(i+1).concat(qt.slice(0,i));return e?n.reverse():n}var Wt={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var e=t.placement,i=e.split("-")[0],n=e.split("-")[1];if(n){var o=t.offsets,s=o.reference,r=o.popper,a=-1!==["bottom","top"].indexOf(i),l=a?"left":"top",c=a?"width":"height",h={start:ht({},l,s[l]),end:ht({},l,s[l]+s[c]-r[c])};t.offsets.popper=dt({},r,h[n])}return t}},offset:{order:200,enabled:!0,fn:function(t,e){var i,n=e.offset,o=t.placement,s=t.offsets,r=s.popper,a=s.reference,l=o.split("-")[0];return i=Ft(+n)?[+n,0]:function(t,e,i,n){var o=[0,0],s=-1!==["right","left"].indexOf(n),r=t.split(/(\+|\-)/).map((function(t){return t.trim()})),a=r.indexOf(St(r,(function(t){return-1!==t.search(/,|\s/)})));r[a]&&-1===r[a].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,c=-1!==a?[r.slice(0,a).concat([r[a].split(l)[0]]),[r[a].split(l)[1]].concat(r.slice(a+1))]:[r];return(c=c.map((function(t,n){var o=(1===n?!s:s)?"height":"width",r=!1;return t.reduce((function(t,e){return""===t[t.length-1]&&-1!==["+","-"].indexOf(e)?(t[t.length-1]=e,r=!0,t):r?(t[t.length-1]+=e,r=!1,t):t.concat(e)}),[]).map((function(t){return function(t,e,i,n){var o=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),s=+o[1],r=o[2];if(!s)return t;if(0===r.indexOf("%")){var a=void 0;switch(r){case"%p":a=i;break;case"%":case"%r":default:a=n}return ut(a)[e]/100*s}return"vh"===r||"vw"===r?("vh"===r?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*s:s}(t,o,e,i)}))}))).forEach((function(t,e){t.forEach((function(i,n){Ft(i)&&(o[e]+=i*("-"===t[n-1]?-1:1))}))})),o}(n,r,a,l),"left"===l?(r.top+=i[0],r.left-=i[1]):"right"===l?(r.top+=i[0],r.left+=i[1]):"top"===l?(r.left+=i[0],r.top-=i[1]):"bottom"===l&&(r.left+=i[0],r.top+=i[1]),t.popper=r,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,e){var i=e.boundariesElement||tt(t.instance.popper);t.instance.reference===i&&(i=tt(i));var n=It("transform"),o=t.instance.popper.style,s=o.top,r=o.left,a=o[n];o.top="",o.left="",o[n]="";var l=vt(t.instance.popper,t.instance.reference,e.padding,i,t.positionFixed);o.top=s,o.left=r,o[n]=a,e.boundaries=l;var c=e.priority,h=t.offsets.popper,d={primary:function(t){var i=h[t];return h[t]<l[t]&&!e.escapeWithReference&&(i=Math.max(h[t],l[t])),ht({},t,i)},secondary:function(t){var i="right"===t?"left":"top",n=h[i];return h[t]>l[t]&&!e.escapeWithReference&&(n=Math.min(h[i],l[t]-("right"===t?h.width:h.height))),ht({},i,n)}};return c.forEach((function(t){var e=-1!==["left","top"].indexOf(t)?"primary":"secondary";h=dt({},h,d[e](t))})),t.offsets.popper=h,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var e=t.offsets,i=e.popper,n=e.reference,o=t.placement.split("-")[0],s=Math.floor,r=-1!==["top","bottom"].indexOf(o),a=r?"right":"bottom",l=r?"left":"top",c=r?"width":"height";return i[a]<s(n[l])&&(t.offsets.popper[l]=s(n[l])-i[c]),i[l]>s(n[a])&&(t.offsets.popper[l]=s(n[a])),t}},arrow:{order:500,enabled:!0,fn:function(t,e){var i;if(!Ht(t.instance.modifiers,"arrow","keepTogether"))return t;var n=e.element;if("string"==typeof n){if(!(n=t.instance.popper.querySelector(n)))return t}else if(!t.instance.popper.contains(n))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var o=t.placement.split("-")[0],s=t.offsets,r=s.popper,a=s.reference,l=-1!==["left","right"].indexOf(o),c=l?"height":"width",h=l?"Top":"Left",d=h.toLowerCase(),u=l?"left":"top",f=l?"bottom":"right",p=Et(n)[c];a[f]-p<r[d]&&(t.offsets.popper[d]-=r[d]-(a[f]-p)),a[d]+p>r[f]&&(t.offsets.popper[d]+=a[d]+p-r[f]),t.offsets.popper=ut(t.offsets.popper);var m=a[d]+a[c]/2-p/2,g=Y(t.instance.popper),_=parseFloat(g["margin"+h]),v=parseFloat(g["border"+h+"Width"]),b=m-t.offsets.popper[d]-_-v;return b=Math.max(Math.min(r[c]-p,b),0),t.arrowElement=n,t.offsets.arrow=(ht(i={},d,Math.round(b)),ht(i,u,""),i),t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(t,e){if(At(t.instance.modifiers,"inner"))return t;if(t.flipped&&t.placement===t.originalPlacement)return t;var i=vt(t.instance.popper,t.instance.reference,e.padding,e.boundariesElement,t.positionFixed),n=t.placement.split("-")[0],o=Tt(n),s=t.placement.split("-")[1]||"",r=[];switch(e.behavior){case"flip":r=[n,o];break;case"clockwise":r=Qt(n);break;case"counterclockwise":r=Qt(n,!0);break;default:r=e.behavior}return r.forEach((function(a,l){if(n!==a||r.length===l+1)return t;n=t.placement.split("-")[0],o=Tt(n);var c=t.offsets.popper,h=t.offsets.reference,d=Math.floor,u="left"===n&&d(c.right)>d(h.left)||"right"===n&&d(c.left)<d(h.right)||"top"===n&&d(c.bottom)>d(h.top)||"bottom"===n&&d(c.top)<d(h.bottom),f=d(c.left)<d(i.left),p=d(c.right)>d(i.right),m=d(c.top)<d(i.top),g=d(c.bottom)>d(i.bottom),_="left"===n&&f||"right"===n&&p||"top"===n&&m||"bottom"===n&&g,v=-1!==["top","bottom"].indexOf(n),b=!!e.flipVariations&&(v&&"start"===s&&f||v&&"end"===s&&p||!v&&"start"===s&&m||!v&&"end"===s&&g),y=!!e.flipVariationsByContent&&(v&&"start"===s&&p||v&&"end"===s&&f||!v&&"start"===s&&g||!v&&"end"===s&&m),w=b||y;(u||_||w)&&(t.flipped=!0,(u||_)&&(n=r[l+1]),w&&(s=function(t){return"end"===t?"start":"start"===t?"end":t}(s)),t.placement=n+(s?"-"+s:""),t.offsets.popper=dt({},t.offsets.popper,Ct(t.instance.popper,t.offsets.reference,t.placement)),t=Nt(t.instance.modifiers,t,"flip"))})),t},behavior:"flip",padding:5,boundariesElement:"viewport",flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(t){var e=t.placement,i=e.split("-")[0],n=t.offsets,o=n.popper,s=n.reference,r=-1!==["left","right"].indexOf(i),a=-1===["top","left"].indexOf(i);return o[r?"left":"top"]=s[i]-(a?o[r?"width":"height"]:0),t.placement=Tt(e),t.offsets.popper=ut(o),t}},hide:{order:800,enabled:!0,fn:function(t){if(!Ht(t.instance.modifiers,"hide","preventOverflow"))return t;var e=t.offsets.reference,i=St(t.instance.modifiers,(function(t){return"preventOverflow"===t.name})).boundaries;if(e.bottom<i.top||e.left>i.right||e.top>i.bottom||e.right<i.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,e){var i=e.x,n=e.y,o=t.offsets.popper,s=St(t.instance.modifiers,(function(t){return"applyStyle"===t.name})).gpuAcceleration;void 0!==s&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var r,a,l=void 0!==s?s:e.gpuAcceleration,c=tt(t.instance.popper),h=ft(c),d={position:o.position},u=function(t,e){var i=t.offsets,n=i.popper,o=i.reference,s=Math.round,r=Math.floor,a=function(t){return t},l=s(o.width),c=s(n.width),h=-1!==["left","right"].indexOf(t.placement),d=-1!==t.placement.indexOf("-"),u=e?h||d||l%2==c%2?s:r:a,f=e?s:a;return{left:u(l%2==1&&c%2==1&&!d&&e?n.left-1:n.left),top:f(n.top),bottom:f(n.bottom),right:u(n.right)}}(t,window.devicePixelRatio<2||!Mt),f="bottom"===i?"top":"bottom",p="right"===n?"left":"right",m=It("transform");if(a="bottom"===f?"HTML"===c.nodeName?-c.clientHeight+u.bottom:-h.height+u.bottom:u.top,r="right"===p?"HTML"===c.nodeName?-c.clientWidth+u.right:-h.width+u.right:u.left,l&&m)d[m]="translate3d("+r+"px, "+a+"px, 0)",d[f]=0,d[p]=0,d.willChange="transform";else{var g="bottom"===f?-1:1,_="right"===p?-1:1;d[f]=a*g,d[p]=r*_,d.willChange=f+", "+p}var v={"x-placement":t.placement};return t.attributes=dt({},v,t.attributes),t.styles=dt({},d,t.styles),t.arrowStyles=dt({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){var e,i;return Rt(t.instance.popper,t.styles),e=t.instance.popper,i=t.attributes,Object.keys(i).forEach((function(t){!1!==i[t]?e.setAttribute(t,i[t]):e.removeAttribute(t)})),t.arrowElement&&Object.keys(t.arrowStyles).length&&Rt(t.arrowElement,t.arrowStyles),t},onLoad:function(t,e,i,n,o){var s=wt(o,e,t,i.positionFixed),r=yt(i.placement,s,e,t,i.modifiers.flip.boundariesElement,i.modifiers.flip.padding);return e.setAttribute("x-placement",r),Rt(e,{position:i.positionFixed?"fixed":"absolute"}),i},gpuAcceleration:void 0}}},Ut=function(){function t(e,i){var n=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};lt(this,t),this.scheduleUpdate=function(){return requestAnimationFrame(n.update)},this.update=$(this.update.bind(this)),this.options=dt({},t.Defaults,o),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=e&&e.jquery?e[0]:e,this.popper=i&&i.jquery?i[0]:i,this.options.modifiers={},Object.keys(dt({},t.Defaults.modifiers,o.modifiers)).forEach((function(e){n.options.modifiers[e]=dt({},t.Defaults.modifiers[e]||{},o.modifiers?o.modifiers[e]:{})})),this.modifiers=Object.keys(this.options.modifiers).map((function(t){return dt({name:t},n.options.modifiers[t])})).sort((function(t,e){return t.order-e.order})),this.modifiers.forEach((function(t){t.enabled&&V(t.onLoad)&&t.onLoad(n.reference,n.popper,n.options,t,n.state)})),this.update();var s=this.options.eventsEnabled;s&&this.enableEventListeners(),this.state.eventsEnabled=s}return ct(t,[{key:"update",value:function(){return Dt.call(this)}},{key:"destroy",value:function(){return Ot.call(this)}},{key:"enableEventListeners",value:function(){return Lt.call(this)}},{key:"disableEventListeners",value:function(){return Pt.call(this)}}]),t}();Ut.Utils=("undefined"!=typeof window?window:i.g).PopperUtils,Ut.placements=Bt,Ut.Defaults=Wt;const $t=Ut,Vt="bs.dropdown",Yt=a().fn.dropdown,zt=new RegExp("38|40|27"),Xt="hide.bs.dropdown",Kt="hidden.bs.dropdown",Gt="click.bs.dropdown.data-api",Jt="keydown.bs.dropdown.data-api",Zt="disabled",te="show",ee="dropdown-menu-right",ie='[data-toggle="dropdown"]',ne=".dropdown-menu",oe={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic",popperConfig:null},se={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string",popperConfig:"(null|object)"};class re{constructor(t,e){this._element=t,this._popper=null,this._config=this._getConfig(e),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}static get VERSION(){return"4.5.3"}static get Default(){return oe}static get DefaultType(){return se}toggle(){if(this._element.disabled||a()(this._element).hasClass(Zt))return;const t=a()(this._menu).hasClass(te);re._clearMenus(),t||this.show(!0)}show(t=!1){if(this._element.disabled||a()(this._element).hasClass(Zt)||a()(this._menu).hasClass(te))return;const e={relatedTarget:this._element},i=a().Event("show.bs.dropdown",e),n=re._getParentFromElement(this._element);if(a()(n).trigger(i),!i.isDefaultPrevented()){if(!this._inNavbar&&t){if(void 0===$t)throw new TypeError("Bootstrap's dropdowns require Popper.js (https://popper.js.org/)");let t=this._element;"parent"===this._config.reference?t=n:h.isElement(this._config.reference)&&(t=this._config.reference,void 0!==this._config.reference.jquery&&(t=this._config.reference[0])),"scrollParent"!==this._config.boundary&&a()(n).addClass("position-static"),this._popper=new $t(t,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===a()(n).closest(".navbar-nav").length&&a()(document.body).children().on("mouseover",null,a().noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),a()(this._menu).toggleClass(te),a()(n).toggleClass(te).trigger(a().Event("shown.bs.dropdown",e))}}hide(){if(this._element.disabled||a()(this._element).hasClass(Zt)||!a()(this._menu).hasClass(te))return;const t={relatedTarget:this._element},e=a().Event(Xt,t),i=re._getParentFromElement(this._element);a()(i).trigger(e),e.isDefaultPrevented()||(this._popper&&this._popper.destroy(),a()(this._menu).toggleClass(te),a()(i).toggleClass(te).trigger(a().Event(Kt,t)))}dispose(){a().removeData(this._element,Vt),a()(this._element).off(".bs.dropdown"),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)}update(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()}_addEventListeners(){a()(this._element).on("click.bs.dropdown",(t=>{t.preventDefault(),t.stopPropagation(),this.toggle()}))}_getConfig(t){return t={...this.constructor.Default,...a()(this._element).data(),...t},h.typeCheckConfig("dropdown",t,this.constructor.DefaultType),t}_getMenuElement(){if(!this._menu){const t=re._getParentFromElement(this._element);t&&(this._menu=t.querySelector(ne))}return this._menu}_getPlacement(){const t=a()(this._element.parentNode);let e="bottom-start";return t.hasClass("dropup")?e=a()(this._menu).hasClass(ee)?"top-end":"top-start":t.hasClass("dropright")?e="right-start":t.hasClass("dropleft")?e="left-start":a()(this._menu).hasClass(ee)&&(e="bottom-end"),e}_detectNavbar(){return a()(this._element).closest(".navbar").length>0}_getOffset(){const t={};return"function"==typeof this._config.offset?t.fn=t=>(t.offsets={...t.offsets,...this._config.offset(t.offsets,this._element)||{}},t):t.offset=this._config.offset,t}_getPopperConfig(){const t={placement:this._getPlacement(),modifiers:{offset:this._getOffset(),flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(t.modifiers.applyStyle={enabled:!1}),{...t,...this._config.popperConfig}}static _jQueryInterface(t){return this.each((function(){let e=a()(this).data(Vt);if(e||(e=new re(this,"object"==typeof t?t:null),a()(this).data(Vt,e)),"string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}static _clearMenus(t){if(t&&(3===t.which||"keyup"===t.type&&9!==t.which))return;const e=[].slice.call(document.querySelectorAll(ie));for(let i=0,n=e.length;i<n;i++){const n=re._getParentFromElement(e[i]),o=a()(e[i]).data(Vt),s={relatedTarget:e[i]};if(t&&"click"===t.type&&(s.clickEvent=t),!o)continue;const r=o._menu;if(!a()(n).hasClass(te))continue;if(t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"keyup"===t.type&&9===t.which)&&a().contains(n,t.target))continue;const l=a().Event(Xt,s);a()(n).trigger(l),l.isDefaultPrevented()||("ontouchstart"in document.documentElement&&a()(document.body).children().off("mouseover",null,a().noop),e[i].setAttribute("aria-expanded","false"),o._popper&&o._popper.destroy(),a()(r).removeClass(te),a()(n).removeClass(te).trigger(a().Event(Kt,s)))}}static _getParentFromElement(t){let e;const i=h.getSelectorFromElement(t);return i&&(e=document.querySelector(i)),e||t.parentNode}static _dataApiKeydownHandler(t){if(/input|textarea/i.test(t.target.tagName)?32===t.which||27!==t.which&&(40!==t.which&&38!==t.which||a()(t.target).closest(ne).length):!zt.test(t.which))return;if(this.disabled||a()(this).hasClass(Zt))return;const e=re._getParentFromElement(this),i=a()(e).hasClass(te);if(!i&&27===t.which)return;if(t.preventDefault(),t.stopPropagation(),!i||27===t.which||32===t.which)return 27===t.which&&a()(e.querySelector(ie)).trigger("focus"),void a()(this).trigger("click");const n=[].slice.call(e.querySelectorAll(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)")).filter((t=>a()(t).is(":visible")));if(0===n.length)return;let o=n.indexOf(t.target);38===t.which&&o>0&&o--,40===t.which&&o<n.length-1&&o++,o<0&&(o=0),n[o].focus()}}a()(document).on(Jt,ie,re._dataApiKeydownHandler).on(Jt,ne,re._dataApiKeydownHandler).on("click.bs.dropdown.data-api keyup.bs.dropdown.data-api",re._clearMenus).on(Gt,ie,(function(t){t.preventDefault(),t.stopPropagation(),re._jQueryInterface.call(a()(this),"toggle")})).on(Gt,".dropdown form",(t=>{t.stopPropagation()})),a().fn.dropdown=re._jQueryInterface,a().fn.dropdown.Constructor=re,a().fn.dropdown.noConflict=()=>(a().fn.dropdown=Yt,re._jQueryInterface);const ae="bs.modal",le=a().fn.modal,ce={backdrop:!0,keyboard:!0,focus:!0,show:!0},he={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},de="hidden.bs.modal",ue="show.bs.modal",fe="focusin.bs.modal",pe="resize.bs.modal",me="click.dismiss.bs.modal",ge="keydown.dismiss.bs.modal",_e="mousedown.dismiss.bs.modal",ve="modal-open",be="fade",ye="show",we="modal-static",Ee=".fixed-top, .fixed-bottom, .is-fixed, .sticky-top";class Te{constructor(t,e){this._config=this._getConfig(e),this._element=t,this._dialog=t.querySelector(".modal-dialog"),this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollbarWidth=0}static get VERSION(){return"4.5.3"}static get Default(){return ce}toggle(t){return this._isShown?this.hide():this.show(t)}show(t){if(this._isShown||this._isTransitioning)return;a()(this._element).hasClass(be)&&(this._isTransitioning=!0);const e=a().Event(ue,{relatedTarget:t});a()(this._element).trigger(e),this._isShown||e.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),a()(this._element).on(me,'[data-dismiss="modal"]',(t=>this.hide(t))),a()(this._dialog).on(_e,(()=>{a()(this._element).one("mouseup.dismiss.bs.modal",(t=>{a()(t.target).is(this._element)&&(this._ignoreBackdropClick=!0)}))})),this._showBackdrop((()=>this._showElement(t))))}hide(t){if(t&&t.preventDefault(),!this._isShown||this._isTransitioning)return;const e=a().Event("hide.bs.modal");if(a()(this._element).trigger(e),!this._isShown||e.isDefaultPrevented())return;this._isShown=!1;const i=a()(this._element).hasClass(be);if(i&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),a()(document).off(fe),a()(this._element).removeClass(ye),a()(this._element).off(me),a()(this._dialog).off(_e),i){const t=h.getTransitionDurationFromElement(this._element);a()(this._element).one(h.TRANSITION_END,(t=>this._hideModal(t))).emulateTransitionEnd(t)}else this._hideModal()}dispose(){[window,this._element,this._dialog].forEach((t=>a()(t).off(".bs.modal"))),a()(document).off(fe),a().removeData(this._element,ae),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._isTransitioning=null,this._scrollbarWidth=null}handleUpdate(){this._adjustDialog()}_getConfig(t){return t={...ce,...t},h.typeCheckConfig("modal",t,he),t}_triggerBackdropTransition(){if("static"===this._config.backdrop){const t=a().Event("hidePrevented.bs.modal");if(a()(this._element).trigger(t),t.isDefaultPrevented())return;const e=this._element.scrollHeight>document.documentElement.clientHeight;e||(this._element.style.overflowY="hidden"),this._element.classList.add(we);const i=h.getTransitionDurationFromElement(this._dialog);a()(this._element).off(h.TRANSITION_END),a()(this._element).one(h.TRANSITION_END,(()=>{this._element.classList.remove(we),e||a()(this._element).one(h.TRANSITION_END,(()=>{this._element.style.overflowY=""})).emulateTransitionEnd(this._element,i)})).emulateTransitionEnd(i),this._element.focus()}else this.hide()}_showElement(t){const e=a()(this._element).hasClass(be),i=this._dialog?this._dialog.querySelector(".modal-body"):null;this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),a()(this._dialog).hasClass("modal-dialog-scrollable")&&i?i.scrollTop=0:this._element.scrollTop=0,e&&h.reflow(this._element),a()(this._element).addClass(ye),this._config.focus&&this._enforceFocus();const n=a().Event("shown.bs.modal",{relatedTarget:t}),o=()=>{this._config.focus&&this._element.focus(),this._isTransitioning=!1,a()(this._element).trigger(n)};if(e){const t=h.getTransitionDurationFromElement(this._dialog);a()(this._dialog).one(h.TRANSITION_END,o).emulateTransitionEnd(t)}else o()}_enforceFocus(){a()(document).off(fe).on(fe,(t=>{document!==t.target&&this._element!==t.target&&0===a()(this._element).has(t.target).length&&this._element.focus()}))}_setEscapeEvent(){this._isShown?a()(this._element).on(ge,(t=>{this._config.keyboard&&27===t.which?(t.preventDefault(),this.hide()):this._config.keyboard||27!==t.which||this._triggerBackdropTransition()})):this._isShown||a()(this._element).off(ge)}_setResizeEvent(){this._isShown?a()(window).on(pe,(t=>this.handleUpdate(t))):a()(window).off(pe)}_hideModal(){this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._showBackdrop((()=>{a()(document.body).removeClass(ve),this._resetAdjustments(),this._resetScrollbar(),a()(this._element).trigger(de)}))}_removeBackdrop(){this._backdrop&&(a()(this._backdrop).remove(),this._backdrop=null)}_showBackdrop(t){const e=a()(this._element).hasClass(be)?be:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className="modal-backdrop",e&&this._backdrop.classList.add(e),a()(this._backdrop).appendTo(document.body),a()(this._element).on(me,(t=>{this._ignoreBackdropClick?this._ignoreBackdropClick=!1:t.target===t.currentTarget&&this._triggerBackdropTransition()})),e&&h.reflow(this._backdrop),a()(this._backdrop).addClass(ye),!t)return;if(!e)return void t();const i=h.getTransitionDurationFromElement(this._backdrop);a()(this._backdrop).one(h.TRANSITION_END,t).emulateTransitionEnd(i)}else if(!this._isShown&&this._backdrop){a()(this._backdrop).removeClass(ye);const e=()=>{this._removeBackdrop(),t&&t()};if(a()(this._element).hasClass(be)){const t=h.getTransitionDurationFromElement(this._backdrop);a()(this._backdrop).one(h.TRANSITION_END,e).emulateTransitionEnd(t)}else e()}else t&&t()}_adjustDialog(){const t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=`${this._scrollbarWidth}px`),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=`${this._scrollbarWidth}px`)}_resetAdjustments(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}_checkScrollbar(){const t=document.body.getBoundingClientRect();this._isBodyOverflowing=Math.round(t.left+t.right)<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()}_setScrollbar(){if(this._isBodyOverflowing){const t=[].slice.call(document.querySelectorAll(Ee)),e=[].slice.call(document.querySelectorAll(".sticky-top"));a()(t).each(((t,e)=>{const i=e.style.paddingRight,n=a()(e).css("padding-right");a()(e).data("padding-right",i).css("padding-right",`${parseFloat(n)+this._scrollbarWidth}px`)})),a()(e).each(((t,e)=>{const i=e.style.marginRight,n=a()(e).css("margin-right");a()(e).data("margin-right",i).css("margin-right",parseFloat(n)-this._scrollbarWidth+"px")}));const i=document.body.style.paddingRight,n=a()(document.body).css("padding-right");a()(document.body).data("padding-right",i).css("padding-right",`${parseFloat(n)+this._scrollbarWidth}px`)}a()(document.body).addClass(ve)}_resetScrollbar(){const t=[].slice.call(document.querySelectorAll(Ee));a()(t).each(((t,e)=>{const i=a()(e).data("padding-right");a()(e).removeData("padding-right"),e.style.paddingRight=i||""}));const e=[].slice.call(document.querySelectorAll(".sticky-top"));a()(e).each(((t,e)=>{const i=a()(e).data("margin-right");void 0!==i&&a()(e).css("margin-right",i).removeData("margin-right")}));const i=a()(document.body).data("padding-right");a()(document.body).removeData("padding-right"),document.body.style.paddingRight=i||""}_getScrollbarWidth(){const t=document.createElement("div");t.className="modal-scrollbar-measure",document.body.appendChild(t);const e=t.getBoundingClientRect().width-t.clientWidth;return document.body.removeChild(t),e}static _jQueryInterface(t,e){return this.each((function(){let i=a()(this).data(ae);const n={...ce,...a()(this).data(),..."object"==typeof t&&t?t:{}};if(i||(i=new Te(this,n),a()(this).data(ae,i)),"string"==typeof t){if(void 0===i[t])throw new TypeError(`No method named "${t}"`);i[t](e)}else n.show&&i.show(e)}))}}a()(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',(function(t){let e;const i=h.getSelectorFromElement(this);i&&(e=document.querySelector(i));const n=a()(e).data(ae)?"toggle":{...a()(e).data(),...a()(this).data()};"A"!==this.tagName&&"AREA"!==this.tagName||t.preventDefault();const o=a()(e).one(ue,(t=>{t.isDefaultPrevented()||o.one(de,(()=>{a()(this).is(":visible")&&this.focus()}))}));Te._jQueryInterface.call(a()(e),n,this)})),a().fn.modal=Te._jQueryInterface,a().fn.modal.Constructor=Te,a().fn.modal.noConflict=()=>(a().fn.modal=le,Te._jQueryInterface);const Ce=["background","cite","href","itemtype","longdesc","poster","src","xlink:href"],Se=/^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/gi,Ne=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;function De(t,e){const i=t.nodeName.toLowerCase();if(-1!==e.indexOf(i))return-1===Ce.indexOf(i)||Boolean(t.nodeValue.match(Se)||t.nodeValue.match(Ne));const n=e.filter((t=>t instanceof RegExp));for(let t=0,e=n.length;t<e;t++)if(i.match(n[t]))return!0;return!1}function Ae(t,e,i){if(0===t.length)return t;if(i&&"function"==typeof i)return i(t);const n=(new window.DOMParser).parseFromString(t,"text/html"),o=Object.keys(e),s=[].slice.call(n.body.querySelectorAll("*"));for(let t=0,i=s.length;t<i;t++){const i=s[t],n=i.nodeName.toLowerCase();if(-1===o.indexOf(i.nodeName.toLowerCase())){i.parentNode.removeChild(i);continue}const r=[].slice.call(i.attributes),a=[].concat(e["*"]||[],e[n]||[]);r.forEach((t=>{De(t,a)||i.removeAttribute(t.nodeName)}))}return n.body.innerHTML}const Ie="tooltip",Oe="bs.tooltip",ke=a().fn.tooltip,xe=new RegExp("(^|\\s)bs-tooltip\\S+","g"),je=["sanitize","whiteList","sanitizeFn"],Le={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string|function)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)",sanitize:"boolean",sanitizeFn:"(null|function)",whiteList:"object",popperConfig:"(null|object)"},Pe={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},Fe={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent",sanitize:!0,sanitizeFn:null,whiteList:{"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},popperConfig:null},Re="show",Me="out",He={HIDE:"hide.bs.tooltip",HIDDEN:"hidden.bs.tooltip",SHOW:"show.bs.tooltip",SHOWN:"shown.bs.tooltip",INSERTED:"inserted.bs.tooltip",CLICK:"click.bs.tooltip",FOCUSIN:"focusin.bs.tooltip",FOCUSOUT:"focusout.bs.tooltip",MOUSEENTER:"mouseenter.bs.tooltip",MOUSELEAVE:"mouseleave.bs.tooltip"},Be="fade",qe="show",Qe="hover",We="focus";class Ue{constructor(t,e){if(void 0===$t)throw new TypeError("Bootstrap's tooltips require Popper.js (https://popper.js.org/)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=t,this.config=this._getConfig(e),this.tip=null,this._setListeners()}static get VERSION(){return"4.5.3"}static get Default(){return Fe}static get NAME(){return Ie}static get DATA_KEY(){return Oe}static get Event(){return He}static get EVENT_KEY(){return".bs.tooltip"}static get DefaultType(){return Le}enable(){this._isEnabled=!0}disable(){this._isEnabled=!1}toggleEnabled(){this._isEnabled=!this._isEnabled}toggle(t){if(this._isEnabled)if(t){const e=this.constructor.DATA_KEY;let i=a()(t.currentTarget).data(e);i||(i=new this.constructor(t.currentTarget,this._getDelegateConfig()),a()(t.currentTarget).data(e,i)),i._activeTrigger.click=!i._activeTrigger.click,i._isWithActiveTrigger()?i._enter(null,i):i._leave(null,i)}else{if(a()(this.getTipElement()).hasClass(qe))return void this._leave(null,this);this._enter(null,this)}}dispose(){clearTimeout(this._timeout),a().removeData(this.element,this.constructor.DATA_KEY),a()(this.element).off(this.constructor.EVENT_KEY),a()(this.element).closest(".modal").off("hide.bs.modal",this._hideModalHandler),this.tip&&a()(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null}show(){if("none"===a()(this.element).css("display"))throw new Error("Please use show on visible elements");const t=a().Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){a()(this.element).trigger(t);const e=h.findShadowRoot(this.element),i=a().contains(null!==e?e:this.element.ownerDocument.documentElement,this.element);if(t.isDefaultPrevented()||!i)return;const n=this.getTipElement(),o=h.getUID(this.constructor.NAME);n.setAttribute("id",o),this.element.setAttribute("aria-describedby",o),this.setContent(),this.config.animation&&a()(n).addClass(Be);const s="function"==typeof this.config.placement?this.config.placement.call(this,n,this.element):this.config.placement,r=this._getAttachment(s);this.addAttachmentClass(r);const l=this._getContainer();a()(n).data(this.constructor.DATA_KEY,this),a().contains(this.element.ownerDocument.documentElement,this.tip)||a()(n).appendTo(l),a()(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new $t(this.element,n,this._getPopperConfig(r)),a()(n).addClass(qe),"ontouchstart"in document.documentElement&&a()(document.body).children().on("mouseover",null,a().noop);const c=()=>{this.config.animation&&this._fixTransition();const t=this._hoverState;this._hoverState=null,a()(this.element).trigger(this.constructor.Event.SHOWN),t===Me&&this._leave(null,this)};if(a()(this.tip).hasClass(Be)){const t=h.getTransitionDurationFromElement(this.tip);a()(this.tip).one(h.TRANSITION_END,c).emulateTransitionEnd(t)}else c()}}hide(t){const e=this.getTipElement(),i=a().Event(this.constructor.Event.HIDE),n=()=>{this._hoverState!==Re&&e.parentNode&&e.parentNode.removeChild(e),this._cleanTipClass(),this.element.removeAttribute("aria-describedby"),a()(this.element).trigger(this.constructor.Event.HIDDEN),null!==this._popper&&this._popper.destroy(),t&&t()};if(a()(this.element).trigger(i),!i.isDefaultPrevented()){if(a()(e).removeClass(qe),"ontouchstart"in document.documentElement&&a()(document.body).children().off("mouseover",null,a().noop),this._activeTrigger.click=!1,this._activeTrigger.focus=!1,this._activeTrigger.hover=!1,a()(this.tip).hasClass(Be)){const t=h.getTransitionDurationFromElement(e);a()(e).one(h.TRANSITION_END,n).emulateTransitionEnd(t)}else n();this._hoverState=""}}update(){null!==this._popper&&this._popper.scheduleUpdate()}isWithContent(){return Boolean(this.getTitle())}addAttachmentClass(t){a()(this.getTipElement()).addClass(`bs-tooltip-${t}`)}getTipElement(){return this.tip=this.tip||a()(this.config.template)[0],this.tip}setContent(){const t=this.getTipElement();this.setElementContent(a()(t.querySelectorAll(".tooltip-inner")),this.getTitle()),a()(t).removeClass("fade show")}setElementContent(t,e){"object"!=typeof e||!e.nodeType&&!e.jquery?this.config.html?(this.config.sanitize&&(e=Ae(e,this.config.whiteList,this.config.sanitizeFn)),t.html(e)):t.text(e):this.config.html?a()(e).parent().is(t)||t.empty().append(e):t.text(a()(e).text())}getTitle(){let t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t}_getPopperConfig(t){return{placement:t,modifiers:{offset:this._getOffset(),flip:{behavior:this.config.fallbackPlacement},arrow:{element:".arrow"},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:t=>{t.originalPlacement!==t.placement&&this._handlePopperPlacementChange(t)},onUpdate:t=>this._handlePopperPlacementChange(t),...this.config.popperConfig}}_getOffset(){const t={};return"function"==typeof this.config.offset?t.fn=t=>(t.offsets={...t.offsets,...this.config.offset(t.offsets,this.element)||{}},t):t.offset=this.config.offset,t}_getContainer(){return!1===this.config.container?document.body:h.isElement(this.config.container)?a()(this.config.container):a()(document).find(this.config.container)}_getAttachment(t){return Pe[t.toUpperCase()]}_setListeners(){this.config.trigger.split(" ").forEach((t=>{if("click"===t)a()(this.element).on(this.constructor.Event.CLICK,this.config.selector,(t=>this.toggle(t)));else if("manual"!==t){const e=t===Qe?this.constructor.Event.MOUSEENTER:this.constructor.Event.FOCUSIN,i=t===Qe?this.constructor.Event.MOUSELEAVE:this.constructor.Event.FOCUSOUT;a()(this.element).on(e,this.config.selector,(t=>this._enter(t))).on(i,this.config.selector,(t=>this._leave(t)))}})),this._hideModalHandler=()=>{this.element&&this.hide()},a()(this.element).closest(".modal").on("hide.bs.modal",this._hideModalHandler),this.config.selector?this.config={...this.config,trigger:"manual",selector:""}:this._fixTitle()}_fixTitle(){const t=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==t)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))}_enter(t,e){const i=this.constructor.DATA_KEY;(e=e||a()(t.currentTarget).data(i))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),a()(t.currentTarget).data(i,e)),t&&(e._activeTrigger["focusin"===t.type?We:Qe]=!0),a()(e.getTipElement()).hasClass(qe)||e._hoverState===Re?e._hoverState=Re:(clearTimeout(e._timeout),e._hoverState=Re,e.config.delay&&e.config.delay.show?e._timeout=setTimeout((()=>{e._hoverState===Re&&e.show()}),e.config.delay.show):e.show())}_leave(t,e){const i=this.constructor.DATA_KEY;(e=e||a()(t.currentTarget).data(i))||(e=new this.constructor(t.currentTarget,this._getDelegateConfig()),a()(t.currentTarget).data(i,e)),t&&(e._activeTrigger["focusout"===t.type?We:Qe]=!1),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState=Me,e.config.delay&&e.config.delay.hide?e._timeout=setTimeout((()=>{e._hoverState===Me&&e.hide()}),e.config.delay.hide):e.hide())}_isWithActiveTrigger(){for(const t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1}_getConfig(t){const e=a()(this.element).data();return Object.keys(e).forEach((t=>{-1!==je.indexOf(t)&&delete e[t]})),"number"==typeof(t={...this.constructor.Default,...e,..."object"==typeof t&&t?t:{}}).delay&&(t.delay={show:t.delay,hide:t.delay}),"number"==typeof t.title&&(t.title=t.title.toString()),"number"==typeof t.content&&(t.content=t.content.toString()),h.typeCheckConfig(Ie,t,this.constructor.DefaultType),t.sanitize&&(t.template=Ae(t.template,t.whiteList,t.sanitizeFn)),t}_getDelegateConfig(){const t={};if(this.config)for(const e in this.config)this.constructor.Default[e]!==this.config[e]&&(t[e]=this.config[e]);return t}_cleanTipClass(){const t=a()(this.getTipElement()),e=t.attr("class").match(xe);null!==e&&e.length&&t.removeClass(e.join(""))}_handlePopperPlacementChange(t){this.tip=t.instance.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(t.placement))}_fixTransition(){const t=this.getTipElement(),e=this.config.animation;null===t.getAttribute("x-placement")&&(a()(t).removeClass(Be),this.config.animation=!1,this.hide(),this.show(),this.config.animation=e)}static _jQueryInterface(t){return this.each((function(){const e=a()(this);let i=e.data(Oe);const n="object"==typeof t&&t;if((i||!/dispose|hide/.test(t))&&(i||(i=new Ue(this,n),e.data(Oe,i)),"string"==typeof t)){if(void 0===i[t])throw new TypeError(`No method named "${t}"`);i[t]()}}))}}a().fn.tooltip=Ue._jQueryInterface,a().fn.tooltip.Constructor=Ue,a().fn.tooltip.noConflict=()=>(a().fn.tooltip=ke,Ue._jQueryInterface);const $e=Ue,Ve="bs.popover",Ye=a().fn.popover,ze=new RegExp("(^|\\s)bs-popover\\S+","g"),Xe={...$e.Default,placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'},Ke={...$e.DefaultType,content:"(string|element|function)"},Ge={HIDE:"hide.bs.popover",HIDDEN:"hidden.bs.popover",SHOW:"show.bs.popover",SHOWN:"shown.bs.popover",INSERTED:"inserted.bs.popover",CLICK:"click.bs.popover",FOCUSIN:"focusin.bs.popover",FOCUSOUT:"focusout.bs.popover",MOUSEENTER:"mouseenter.bs.popover",MOUSELEAVE:"mouseleave.bs.popover"};class Je extends $e{static get VERSION(){return"4.5.3"}static get Default(){return Xe}static get NAME(){return"popover"}static get DATA_KEY(){return Ve}static get Event(){return Ge}static get EVENT_KEY(){return".bs.popover"}static get DefaultType(){return Ke}isWithContent(){return this.getTitle()||this._getContent()}addAttachmentClass(t){a()(this.getTipElement()).addClass(`bs-popover-${t}`)}getTipElement(){return this.tip=this.tip||a()(this.config.template)[0],this.tip}setContent(){const t=a()(this.getTipElement());this.setElementContent(t.find(".popover-header"),this.getTitle());let e=this._getContent();"function"==typeof e&&(e=e.call(this.element)),this.setElementContent(t.find(".popover-body"),e),t.removeClass("fade show")}_getContent(){return this.element.getAttribute("data-content")||this.config.content}_cleanTipClass(){const t=a()(this.getTipElement()),e=t.attr("class").match(ze);null!==e&&e.length>0&&t.removeClass(e.join(""))}static _jQueryInterface(t){return this.each((function(){let e=a()(this).data(Ve);const i="object"==typeof t?t:null;if((e||!/dispose|hide/.test(t))&&(e||(e=new Je(this,i),a()(this).data(Ve,e)),"string"==typeof t)){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}a().fn.popover=Je._jQueryInterface,a().fn.popover.Constructor=Je,a().fn.popover.noConflict=()=>(a().fn.popover=Ye,Je._jQueryInterface);const Ze="scrollspy",ti="bs.scrollspy",ei=a().fn.scrollspy,ii={offset:10,method:"auto",target:""},ni={offset:"number",method:"string",target:"(string|element)"},oi="active",si=".nav, .list-group",ri="position";class ai{constructor(t,e){this._element=t,this._scrollElement="BODY"===t.tagName?window:t,this._config=this._getConfig(e),this._selector=`${this._config.target} .nav-link,${this._config.target} .list-group-item,${this._config.target} .dropdown-item`,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,a()(this._scrollElement).on("scroll.bs.scrollspy",(t=>this._process(t))),this.refresh(),this._process()}static get VERSION(){return"4.5.3"}static get Default(){return ii}refresh(){const t=this._scrollElement===this._scrollElement.window?"offset":ri,e="auto"===this._config.method?t:this._config.method,i=e===ri?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),[].slice.call(document.querySelectorAll(this._selector)).map((t=>{let n;const o=h.getSelectorFromElement(t);if(o&&(n=document.querySelector(o)),n){const t=n.getBoundingClientRect();if(t.width||t.height)return[a()(n)[e]().top+i,o]}return null})).filter((t=>t)).sort(((t,e)=>t[0]-e[0])).forEach((t=>{this._offsets.push(t[0]),this._targets.push(t[1])}))}dispose(){a().removeData(this._element,ti),a()(this._scrollElement).off(".bs.scrollspy"),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null}_getConfig(t){if("string"!=typeof(t={...ii,..."object"==typeof t&&t?t:{}}).target&&h.isElement(t.target)){let e=a()(t.target).attr("id");e||(e=h.getUID(Ze),a()(t.target).attr("id",e)),t.target=`#${e}`}return h.typeCheckConfig(Ze,t,ni),t}_getScrollTop(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop}_getScrollHeight(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)}_getOffsetHeight(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height}_process(){const t=this._getScrollTop()+this._config.offset,e=this._getScrollHeight(),i=this._config.offset+e-this._getOffsetHeight();if(this._scrollHeight!==e&&this.refresh(),t>=i){const t=this._targets[this._targets.length-1];this._activeTarget!==t&&this._activate(t)}else{if(this._activeTarget&&t<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(let e=this._offsets.length;e--;)this._activeTarget!==this._targets[e]&&t>=this._offsets[e]&&(void 0===this._offsets[e+1]||t<this._offsets[e+1])&&this._activate(this._targets[e])}}_activate(t){this._activeTarget=t,this._clear();const e=this._selector.split(",").map((e=>`${e}[data-target="${t}"],${e}[href="${t}"]`)),i=a()([].slice.call(document.querySelectorAll(e.join(","))));i.hasClass("dropdown-item")?(i.closest(".dropdown").find(".dropdown-toggle").addClass(oi),i.addClass(oi)):(i.addClass(oi),i.parents(si).prev(".nav-link, .list-group-item").addClass(oi),i.parents(si).prev(".nav-item").children(".nav-link").addClass(oi)),a()(this._scrollElement).trigger("activate.bs.scrollspy",{relatedTarget:t})}_clear(){[].slice.call(document.querySelectorAll(this._selector)).filter((t=>t.classList.contains(oi))).forEach((t=>t.classList.remove(oi)))}static _jQueryInterface(t){return this.each((function(){let e=a()(this).data(ti);if(e||(e=new ai(this,"object"==typeof t&&t),a()(this).data(ti,e)),"string"==typeof t){if(void 0===e[t])throw new TypeError(`No method named "${t}"`);e[t]()}}))}}a()(window).on("load.bs.scrollspy.data-api",(()=>{const t=[].slice.call(document.querySelectorAll('[data-spy="scroll"]'));for(let e=t.length;e--;){const i=a()(t[e]);ai._jQueryInterface.call(i,i.data())}})),a().fn.scrollspy=ai._jQueryInterface,a().fn.scrollspy.Constructor=ai,a().fn.scrollspy.noConflict=()=>(a().fn.scrollspy=ei,ai._jQueryInterface);const li="bs.tab",ci=a().fn.tab,hi="active",di="fade",ui="show",fi=".active",pi="> li > .active";class mi{constructor(t){this._element=t}static get VERSION(){return"4.5.3"}show(){if(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&a()(this._element).hasClass(hi)||a()(this._element).hasClass("disabled"))return;let t,e;const i=a()(this._element).closest(".nav, .list-group")[0],n=h.getSelectorFromElement(this._element);if(i){const t="UL"===i.nodeName||"OL"===i.nodeName?pi:fi;e=a().makeArray(a()(i).find(t)),e=e[e.length-1]}const o=a().Event("hide.bs.tab",{relatedTarget:this._element}),s=a().Event("show.bs.tab",{relatedTarget:e});if(e&&a()(e).trigger(o),a()(this._element).trigger(s),s.isDefaultPrevented()||o.isDefaultPrevented())return;n&&(t=document.querySelector(n)),this._activate(this._element,i);const r=()=>{const t=a().Event("hidden.bs.tab",{relatedTarget:this._element}),i=a().Event("shown.bs.tab",{relatedTarget:e});a()(e).trigger(t),a()(this._element).trigger(i)};t?this._activate(t,t.parentNode,r):r()}dispose(){a().removeData(this._element,li),this._element=null}_activate(t,e,i){const n=(!e||"UL"!==e.nodeName&&"OL"!==e.nodeName?a()(e).children(fi):a()(e).find(pi))[0],o=i&&n&&a()(n).hasClass(di),s=()=>this._transitionComplete(t,n,i);if(n&&o){const t=h.getTransitionDurationFromElement(n);a()(n).removeClass(ui).one(h.TRANSITION_END,s).emulateTransitionEnd(t)}else s()}_transitionComplete(t,e,i){if(e){a()(e).removeClass(hi);const t=a()(e.parentNode).find("> .dropdown-menu .active")[0];t&&a()(t).removeClass(hi),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!1)}if(a()(t).addClass(hi),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!0),h.reflow(t),t.classList.contains(di)&&t.classList.add(ui),t.parentNode&&a()(t.parentNode).hasClass("dropdown-menu")){const e=a()(t).closest(".dropdown")[0];if(e){const t=[].slice.call(e.querySelectorAll(".dropdown-toggle"));a()(t).addClass(hi)}t.setAttribute("aria-expanded",!0)}i&&i()}static _jQueryInterface(t){return this.each((function(){const e=a()(this);let i=e.data(li);if(i||(i=new mi(this),e.data(li,i)),"string"==typeof t){if(void 0===i[t])throw new TypeError(`No method named "${t}"`);i[t]()}}))}}a()(document).on("click.bs.tab.data-api",'[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',(function(t){t.preventDefault(),mi._jQueryInterface.call(a()(this),"show")})),a().fn.tab=mi._jQueryInterface,a().fn.tab.Constructor=mi,a().fn.tab.noConflict=()=>(a().fn.tab=ci,mi._jQueryInterface);const gi="bs.toast",_i=a().fn.toast,vi="click.dismiss.bs.toast",bi="hide",yi="show",wi="showing",Ei={animation:"boolean",autohide:"boolean",delay:"number"},Ti={animation:!0,autohide:!0,delay:500};class Ci{constructor(t,e){this._element=t,this._config=this._getConfig(e),this._timeout=null,this._setListeners()}static get VERSION(){return"4.5.3"}static get DefaultType(){return Ei}static get Default(){return Ti}show(){const t=a().Event("show.bs.toast");if(a()(this._element).trigger(t),t.isDefaultPrevented())return;this._clearTimeout(),this._config.animation&&this._element.classList.add("fade");const e=()=>{this._element.classList.remove(wi),this._element.classList.add(yi),a()(this._element).trigger("shown.bs.toast"),this._config.autohide&&(this._timeout=setTimeout((()=>{this.hide()}),this._config.delay))};if(this._element.classList.remove(bi),h.reflow(this._element),this._element.classList.add(wi),this._config.animation){const t=h.getTransitionDurationFromElement(this._element);a()(this._element).one(h.TRANSITION_END,e).emulateTransitionEnd(t)}else e()}hide(){if(!this._element.classList.contains(yi))return;const t=a().Event("hide.bs.toast");a()(this._element).trigger(t),t.isDefaultPrevented()||this._close()}dispose(){this._clearTimeout(),this._element.classList.contains(yi)&&this._element.classList.remove(yi),a()(this._element).off(vi),a().removeData(this._element,gi),this._element=null,this._config=null}_getConfig(t){return t={...Ti,...a()(this._element).data(),..."object"==typeof t&&t?t:{}},h.typeCheckConfig("toast",t,this.constructor.DefaultType),t}_setListeners(){a()(this._element).on(vi,'[data-dismiss="toast"]',(()=>this.hide()))}_close(){const t=()=>{this._element.classList.add(bi),a()(this._element).trigger("hidden.bs.toast")};if(this._element.classList.remove(yi),this._config.animation){const e=h.getTransitionDurationFromElement(this._element);a()(this._element).one(h.TRANSITION_END,t).emulateTransitionEnd(e)}else t()}_clearTimeout(){clearTimeout(this._timeout),this._timeout=null}static _jQueryInterface(t){return this.each((function(){const e=a()(this);let i=e.data(gi);if(i||(i=new Ci(this,"object"==typeof t&&t),e.data(gi,i)),"string"==typeof t){if(void 0===i[t])throw new TypeError(`No method named "${t}"`);i[t](this)}}))}}a().fn.toast=Ci._jQueryInterface,a().fn.toast.Constructor=Ci,a().fn.toast.noConflict=()=>(a().fn.toast=_i,Ci._jQueryInterface)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,